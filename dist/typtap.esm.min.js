'use strict';class Tap$$module$dist$typtap_esm{constructor(){this.buffer=[]}print(a,b){a="number"===typeof b?Array(b+1).join(" ")+a:a;this.buffer.push(a);return a}start(){this.print("TAP version 13")}label(a){this.print("# "+a)}test(a){this.print(`${a.passed?"ok":"not ok"} ${a.id} ${a.description}`)}error(a){this.print("---",2);a instanceof Error?(this.print(`name: ${a.name}`,4),this.print(`message: ${a.message}`,4),this.print(`stack: |-\n${this.indentStack(a.stack,6)}`,4)):this.print(`error: ${JSON.stringify(a)}`,
4);this.print("...",2)}end(a,b){this.print("1.."+(a+b));this.flush()}flush(){console.log(this.buffer.join("\n"));this.buffer=[]}indentStack(a,b){return(a?a:"").split("\n").map(a=>Array(b+1).join(" ")+a).join("\n")}}
var isArray$$module$dist$typtap_esm=Array.isArray,keyList$$module$dist$typtap_esm=Object.keys,hasProp$$module$dist$typtap_esm=Object.prototype.hasOwnProperty,fastDeepEqual$$module$dist$typtap_esm=function equal(a,b){if(a===b)return!0;if(a&&b&&"object"==typeof a&&"object"==typeof b){var c=isArray$$module$dist$typtap_esm(a),d=isArray$$module$dist$typtap_esm(b);if(c&&d){var f=a.length;if(f!=b.length)return!1;for(c=f;0!==c--;)if(!equal(a[c],b[c]))return!1;return!0}if(c!=d)return!1;c=a instanceof Date;
d=b instanceof Date;if(c!=d)return!1;if(c&&d)return a.getTime()==b.getTime();c=a instanceof RegExp;d=b instanceof RegExp;if(c!=d)return!1;if(c&&d)return a.toString()==b.toString();d=keyList$$module$dist$typtap_esm(a);f=d.length;if(f!==keyList$$module$dist$typtap_esm(b).length)return!1;for(c=f;0!==c--;)if(!hasProp$$module$dist$typtap_esm.call(b,d[c]))return!1;for(c=f;0!==c--;)if(f=d[c],!equal(a[f],b[f]))return!1;return!0}return a!==a&&b!==b};
class Typtap$$module$dist$typtap_esm{constructor(a){this.single=!1;this.exclude=this.include=void 0;this.counter=this.errored=this.failed=this.passed=0;this.tests=[];this.reporter=a;this.context={equal:(a,e,c)=>this.report(fastDeepEqual$$module$dist$typtap_esm(a,e),c),fail:a=>this.report(!1,a),notEqual:(a,e,c)=>this.report(!fastDeepEqual$$module$dist$typtap_esm(a,e),c),pass:a=>this.report(!0,a),test:(a,e,c)=>this.test(a,e,c)}}test(a,b,e){this.tests.push({description:a,runner:async()=>{this.reporter&&
this.reporter.label(a);try{e&&"number"===typeof e.timeout?await Promise.race([b(this.context),new Promise((a,b)=>{setTimeout(()=>b(Error("Timeout")),e.timeout)})]):await b(this.context)}catch(c){++this.errored,this.reporter&&this.reporter.error(c)}}})}async run(){this.reporter&&this.reporter.start();let a=this.tests;this.single&&0<this.tests.length&&(a=[this.tests[0]]);this.include&&(a=a.filter(({description:a})=>this.include.test(a)));this.exclude&&(a=a.filter(({description:a})=>!this.exclude.test(a)));
for(const {runner:b}of a)await b();this.reporter&&this.reporter.end(this.passed,this.failed);return{passed:this.passed,failed:this.failed,errored:this.errored}}report(a,b){a?++this.passed:++this.failed;this.reporter&&this.reporter.test({description:b?b:"",id:++this.counter,passed:a})}}Typtap$$module$dist$typtap_esm.Default=new Typtap$$module$dist$typtap_esm(new Tap$$module$dist$typtap_esm);const test$$module$dist$typtap_esm=(a,b,e)=>{Typtap$$module$dist$typtap_esm.Default.test(a,b)};
"undefined"!==typeof window&&(window.typtap={test:test$$module$dist$typtap_esm,Typtap:Typtap$$module$dist$typtap_esm,Tap:Tap$$module$dist$typtap_esm});var module$dist$typtap_esm={};module$dist$typtap_esm.Tap=Tap$$module$dist$typtap_esm;module$dist$typtap_esm.Typtap=Typtap$$module$dist$typtap_esm;module$dist$typtap_esm.test=test$$module$dist$typtap_esm;
